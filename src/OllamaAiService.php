<?php

namespace App;

use ArdaGnsrn\Ollama\Ollama;
use Exception;

class OllamaAiService implements AiServiceInterface
{
    protected $client;
    protected string $model;

    public function __construct(string $host, string $model)
    {
        $this->client = Ollama::client($host);
        $this->model = $model;
    }

    public function getResponse(string $question): string
    {
        $systemPrompt = <<<EOT
Act√∫a como un asistente t√©cnico enfocado exclusivamente en PHP. Tu objetivo es proporcionar respuestas claras, concisas y directamente √∫tiles para desarrolladores, evitando informaci√≥n irrelevante. ‚úÖ Si la consulta est√° relacionada con PHP, responde con precisi√≥n t√©cnica en menos de 120 palabras, incluyendo ejemplos si son √∫tiles. üö´ Si la consulta no est√° relacionada con PHP, responde: "Lo siento, este asistente est√° dise√±ado exclusivamente para consultas sobre PHP." ‚öôÔ∏è Siempre prioriza buenas pr√°cticas, compatibilidad con PHP 8.2+, y contextualiza seg√∫n CLI, web, u otras tecnolog√≠as si se especifican.
EOT;

        try {
            $result = $this->client->chat()->create([
                'model' => $this->model,
                'messages' => [
                    ['role' => 'system', 'content' => $systemPrompt],
                    ['role' => 'user', 'content' => $question],
                ],
            ]);

            return $result->message->content;
        } catch (Exception $e) {
            // En una aplicaci√≥n real, aqu√≠ registrar√≠as el error en un log.
            error_log("Ollama API Error: " . $e->getMessage());
            return "Error: No se pudo conectar con el servicio de IA. Por favor, int√©ntalo de nuevo m√°s tarde.";
        }
    }
}